//Q2.to find the sum of the two pairs of a given number exist or not
->It's a very first approach using the two loops iterating through the whole array and checking each of the number and by doing the sum.
Time complexity is: O(n2) in the worst case here
#include<iostream>
using namespace std;
int checkpairsum(int a[],int size,int x)
{
    for(int i=0;i<size;i++)
    {
        for(int j=i+1;j<size;j++)
        {
            if(a[i]+a[j]==x)
            {
        cout<<"Pair with a given sum "<<x<<" is ("<<a[i]<<","<<a[j]<<")"<<endl;
 
        return 1;    
            }
        }
    }
    return 0;
}
int main()
{
    int arr[]={0, -1, 2, -3, 1};
    int n=sizeof(arr)/sizeof(arr[0]);
    int x=-2;
    if(checkpairsum(arr,n,x))
    {
        cout<<"Valid pair exits here "<<endl;
    }
    else{
        cout<<"Pair does not exits"<<endl;
    }
    
    return 0;
}

Approach 2: Using the hashing by creating the hash table here.
time complexity is O(n) here as it take n times to insert the values in the hash table here.

->find() function: find function in C++ is used to search for a specific key in an unordered map.
Parameters: It takes the key as a parameter.

Return values: If the given key exists in unordered_map it returns an iterator to that element otherwise it returns the end of the map iterator.

Code:

#include<bits/stdc++.h>
using namespace std;
void checkvalidpair(int a[],int size,int sum)
{
    unordered_set<int> s;
    for(int i=0;i<size;i++)
    {
    int temp=sum-a[i];

    if(s.find(temp)!=s.end())
//here if it finds key in the table then it will not return the end ,here it will return the iterator to the given key temp and the if part will be executed.
    {
        cout<<"Pair with a given sum "<<sum<<" is ("<<a[i]<<","<<temp<<")"<<endl;
    }
    s.insert(a[i]);
    }
}
int main()
{
    int arr[]={ 1, 4, 45, 6, 10, 8 };
    int n=sizeof(arr)/sizeof(arr[0]);
    int s=16;
    checkvalidpair(arr,n,s);
    return 0;
}
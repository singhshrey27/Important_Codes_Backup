Q3. To find whether the array2 is a subset of array1 or not

first appraoch-> By running two loops and checking each element from the array2 in array1
time-> O(nm)
#include<iostream>
using namespace std;
int isSubset(int a1[],int a2[],int m,int n)
{
    int i=0;
    int j=0;
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<m;j++)
        {
            if(a1[i]==a2[j])
                break;
        }
        if(j==m)
        {
            return 0;
        }
    }
    return 1;
}
int main()
{
    int arr1[] = { 11, 1, 13, 21, 3, 7 };
    int arr2[] = { 11, 3, 7, 1 };
 
    int m = sizeof(arr1) / sizeof(arr1[0]);
    int n = sizeof(arr2) / sizeof(arr2[0]);
 
    if (isSubset(arr1, arr2, m, n))
        printf("arr2[] is subset of arr1[] ");
    else
        printf("arr2[] is not a subset of arr1[]");
 
    return 0;
}

appraoch2-> By using hashing i.e by using the unordered_set
This can be also solved by using the ordered set but it takes time complexity O(logn) in insertion in which elements are inserted in a particular
order(ascending or descending) but unordered_set takes the time complexity O(n) in the worst case and O(1) int the best case.

#include<iostream>
#include<unordered_set>
using namespace std;
bool checksubset(int arr1[],int arr2[],int size1,int size2)
{
   unordered_set<int> st;
   for(int i=0;i<size1;i++)
   {
       st.insert(arr1[i]);
   }
   for(int i=0;i<size2;i++)
   {
       if(st.find(arr2[i])==st.end())
       {
           return false;
           
       }
   }
   return true;
}
int main()
{
   int a1[] = { 11, 1, 13, 21, 3, 7 };
    int a2[] = { 11, 3, 7, 1 };
    int size1=sizeof(a1)/sizeof(a1[0]);
    int size2=sizeof(a2)/sizeof(a2[0]);
    if(checksubset(a1,a2,size1,size2))
    {
        cout<<"arr2 is a subset of the arr1"<<endl;
    }
    else
    
    {
        cout<<"arr2 is not a subset of arr[]1"<<endl;
    }
    return 0;
}



Q1.count the frequencies of the number in the given array:

->First appraoch to run two loops and count the number of occurrence it basically keeps the track of the visited elements int he array.
time complexity is O(n2)

#include<iostream>
#include<vector>
using namespace std;
void countfreq(int a[],int size)
{
    vector<bool> visited(size,false);
    for(int i=0;i<size;i++)
    {
        if(visited[i]==true)
        continue;
        int count=1;
        for(int j=i+1;j<size;j++)
        {
            if(a[i]==a[j])
            {
                visited[j]=true;
                count++;
            }
        }
        cout<<a[i]<<"  "<<count<<endl;
    }
}

int main()
{
    int arr[]={ 10, 20, 20, 10, 10, 20, 5, 20 };
    int n=sizeof(arr)/sizeof(arr[0]);
    countfreq(arr,n);
    return 0;
    
}

->to use the hashing using the unordered_map
time complexity is O(n) in the worst case here

#include <iostream>
#include<unordered_map>
using namespace std;

void countFreq(int arr[], int n)
{
	unordered_map<int, int> mp;

	// Traverse through array elements and
	// count frequencies
	for (int i = 0; i < n; i++)
		mp[arr[i]]++;

	// Traverse through map and print frequencies
	for (auto x : mp)
		cout << x.first << " " << x.second << endl;
}

int main()
{
	int arr[] = { 10, 20, 20, 10, 10, 20, 5, 20 };
	int n = sizeof(arr) / sizeof(arr[0]);
	countFreq(arr, n);
	return 0;
}
